type Query {
  info: String!
  feed(filter: String, skip: Int, take: Int, orderBy: LinkOrderByInput): Feed!
  user: User!
  users: [User!]!
  orders: [Order!]!
}

type Feed {
  id: ID!
  links: [Link!]!
  count: Int!
}

type Mutation {
  post(url: String!, description: String!): Link!
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  vote(linkId: ID!): Vote
  placeOrder(input: OrderInput): Order
  changeOrderStatus(id: ID!, newStatus: Int!): Order
  changePizzaStatus(id: ID!, newStatus: Int!): Pizza
}

type Subscription {
  newLink: Link
  newVote: Vote
  newOrder: Order
  updateOrderStatus: Order
  updatePizzaStatus: Pizza
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
  orderCount: Int
  orders: [Order!]!
}

input OrderInput {
  userId: String!
  pizzas: [PizzaInput!]!
}

input PizzaInput {
  name: String
  size: String!
  crust: String!
  sauce: String!
  cheeseAmount: String!
  toppings: String
}

type Order {
  id: ID!
  createdAt: DateTime!
  email: String!
  pizzasCount: Int
  pizzas: [Pizza!]!
  status: Int
}

type Pizza {
  id: ID!
  name: String!
  size: String!
  crust: String!
  sauce: String!
  cheeseAmount: String!
  toppings: String!
  orderId: Int!
  status: Int
}

type Link {
  id: ID!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
  createdAt: DateTime!
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

input LinkOrderByInput {
  description: Sort
  url: Sort
  createdAt: Sort
}

enum Sort {
  asc
  desc
}

scalar DateTime
